
==================== FINAL INTERFACE ====================
2018-10-25 17:25:02.657528834 UTC

interface main:Data 8043
  interface hash: f27b84da37f3e24933edfcc6f8f08010
  ABI hash: dad82d6e24dc3f4a5a52667185117ee6
  export-list hash: a357e79a37cfd214c811cbeb490e42cc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8146d206ee62deaf75677622cb46f5a2
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.getImagesFromFile
  Data.getLabelsFromFile
  Data.getTrainingData
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0* binary-0.8.5.1*
                      bytestring-0.10.8.2* deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Word 22a60783baa8ba4f33c4588b366fade3
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  binary-0.8.5.1:Data.Binary.Get 87cb42933d18031b1c0310c11cc55a30
import  -/  binary-0.8.5.1:Data.Binary.Get.Internal 80c0f20d5e0a7c3f9cc1d06827d53343
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 8fd50da86fe790bb8a7b082831709ebf
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
548c6384ccde82feee9c373c47a1417b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Data.$trModule3 Data.$trModule1) -}
2e3750df8d7b897f5930a8f28ab9f367
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.$trModule2) -}
724e978f3691a763b438e834634e2a4e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data"#) -}
91acdc40bbbf9e3b4008649e1df71409
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Data.$trModule4) -}
0331ba5d247b8a1e81717bf2ae61c8ec
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
fce8ce161040cc470fe8f1d4433508d2
  $wks ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Decoder [[GHC.Word.Word8]]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww3 4# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.getImagesFromFile13
                        Data.getImagesFromFile_enoughChunks
                        Data.getImagesFromFile_onSucc
                        Data.getImagesFromFile10
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ [[GHC.Word.Word8]]
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        Data.getImagesFromFile9
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      Data.getImagesFromFile8
                        (GHC.Types.:
                           @ (Data.Binary.Get.Internal.Get [GHC.Word.Word8])
                           Data.getImagesFromFile5
                             `cast`
                           (Sym (Data.Binary.Get.Internal.N:Get[0] <[GHC.Word.Word8]>_R))
                           Data.getImagesFromFile4)
                        @ [[GHC.Word.Word8]]
                        (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 4#)
                           (GHC.Prim.-# ww3 4#))
                        (Data.Binary.Get.Internal.$WDone
                           @ [[GHC.Word.Word8]]) } } } } } } } } }) -}
c50bd3590367cb5a444dfe546c73a6fd
  $wlvl ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Decoder [[GHC.Word.Word8]]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww3 4# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.getImagesFromFile13
                        Data.getImagesFromFile_enoughChunks
                        Data.getImagesFromFile_onSucc
                        Data.getImagesFromFile10
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ [[GHC.Word.Word8]]
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        Data.getImagesFromFile14
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 1#))
                             0#
                             GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv2 of s'1 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 2#))
                             0#
                             GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv4 of s'2 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww (GHC.Prim.+# ww2 3#))
                             0#
                             GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv6 of s'3 { DEFAULT ->
                      Data.$wks
                        ww
                        ww1
                        (GHC.Prim.+# ww2 4#)
                        (GHC.Prim.-# ww3 4#) } } } } } } } } }) -}
7ae4ba5e8e59a0428062b72c5b217f14
  $wlvl1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Binary.Get.Internal.Success GHC.Word.Word8 r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,C(C1(U))>,
     Inline: [0],
     Unfolding: (\ @ r
                   (ww :: GHC.Prim.Addr#)
                   (ww1 :: GHC.ForeignPtr.ForeignPtrContents)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.Int#)
                   (w :: Data.Binary.Get.Internal.Success GHC.Word.Word8 r) ->
                 case GHC.Prim.>=# ww3 1# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.getLabelsFromFile6
                        Data.getImagesFromFile_enoughChunks
                        Data.getImagesFromFile_onSucc
                        (Data.getImagesFromFile_onFail
                           @ Data.ByteString.Internal.ByteString)
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ r
                        (Data.ByteString.Internal.PS ww ww1 ww2 ww3)
                        (\ (i' :: Data.ByteString.Internal.ByteString)
                           (a1 :: Data.ByteString.Internal.ByteString) ->
                         case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                         case GHC.Prim.readWord8OffAddr#
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.plusAddr# dt dt2)
                                0#
                                GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.touch#
                                @ 'GHC.Types.LiftedRep
                                @ GHC.ForeignPtr.ForeignPtrContents
                                dt1
                                ipv of s' { DEFAULT ->
                         w (Data.ByteString.Internal.PS
                              dt
                              dt1
                              (GHC.Prim.+# dt2 1#)
                              (GHC.Prim.-# dt3 1#))
                           (GHC.Word.W8# ipv1) } } })
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# ww ww2)
                             0#
                             GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww1
                             ipv of s' { DEFAULT ->
                      w (Data.ByteString.Internal.PS
                           ww
                           ww1
                           (GHC.Prim.+# ww2 1#)
                           (GHC.Prim.-# ww3 1#))
                        (GHC.Word.W8# ipv1) } } }) -}
361c6151b38473e4ca29c70f719df918
  getImagesFromFile ::
    GHC.Base.String -> GHC.Types.IO [[GHC.Word.Word8]]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.getImagesFromFile1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[[GHC.Word.Word8]]>_R)) -}
9e348785fdd955ccd1c6bdb46490788d
  getImagesFromFile1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.Word.Word8]] #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (file :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        file
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    Data.Binary.Get.runGet3
                      @ [[GHC.Word.Word8]]
                      Data.getImagesFromFile2
                      ipv3 #) } }) -}
f8e836208d422403b83d0540002dad0f
  getImagesFromFile10 ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success
            Data.ByteString.Internal.ByteString r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1,
     Unfolding: (\ (bss :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (ds :: Data.ByteString.Internal.ByteString)[OneShot]
                   (ds1 :: Data.Binary.Get.Internal.Success
                             Data.ByteString.Internal.ByteString r)[OneShot] ->
                 case Data.ByteString.concat
                        bss of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail @ r dt Data.getImagesFromFile11 }) -}
13fc1c205f520dc5976de3a508b44856
  getImagesFromFile11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Data.getImagesFromFile12) -}
3069a52e00deb0d1656bd042eeea49cb
  getImagesFromFile12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not enough bytes"#) -}
5436924c939a8148a23b0867301d1140
  getImagesFromFile13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
f92c867177d442776669cfe3e0516ffd
  getImagesFromFile14 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder [[GHC.Word.Word8]]
  {- Arity: 2, Strictness: <L,A><S(SLSS),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                        0#
                        GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv4 of s'2 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                        0#
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv6 of s'3 { DEFAULT ->
                 Data.$wks
                   dt
                   dt1
                   (GHC.Prim.+# dt2 4#)
                   (GHC.Prim.-# dt3 4#) } } } } } } } } }) -}
433e38c14f59562ae6d69a9db51d9bac
  getImagesFromFile15 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder [[GHC.Word.Word8]]
  {- Arity: 2, Strictness: <L,A><S(SLSS),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                        0#
                        GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv4 of s'2 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                        0#
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv6 of s'3 { DEFAULT ->
                 Data.$wlvl
                   dt
                   dt1
                   (GHC.Prim.+# dt2 4#)
                   (GHC.Prim.-# dt3 4#) } } } } } } } } }) -}
65774ae71d46e5013ecd8d24299cc638
  getImagesFromFile2 :: Data.Binary.Get.Decoder [[GHC.Word.Word8]]
  {- Unfolding: (Data.Binary.Get.$wpoly_go
                   @ [[GHC.Word.Word8]]
                   (Data.Binary.Get.Internal.runGetIncremental1
                      @ [[GHC.Word.Word8]]
                      (Data.Binary.Get.Internal.readN1
                         @ GHC.Types.Int
                         @ Data.ByteString.Internal.ByteString
                         Data.getImagesFromFile13
                         Data.getImagesFromFile_enoughChunks
                         Data.getImagesFromFile_onSucc
                         (Data.getImagesFromFile_onFail
                            @ Data.ByteString.Internal.ByteString)
                           `cast`
                         (<[Data.ByteString.Internal.ByteString]>_R
                          ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                        <Data.ByteString.Internal.ByteString>_R))
                         @ [[GHC.Word.Word8]]
                         Data.ByteString.empty
                         Data.getImagesFromFile3))
                   0#) -}
917952b55af3cf9cbef1c011a030090f
  getImagesFromFile3 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder [[GHC.Word.Word8]]
  {- Arity: 2, Strictness: <L,A><S(SLSS),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                        0#
                        GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv4 of s'2 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                        0#
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv6 of s'3 { DEFAULT ->
                 let {
                   dt4 :: GHC.Prim.Int# = GHC.Prim.-# dt3 4#
                 } in
                 let {
                   dt5 :: GHC.Prim.Int# = GHC.Prim.+# dt2 4#
                 } in
                 case GHC.Prim.>=# dt4 4# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.getImagesFromFile13
                        Data.getImagesFromFile_enoughChunks
                        Data.getImagesFromFile_onSucc
                        Data.getImagesFromFile10
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ [[GHC.Word.Word8]]
                        (Data.ByteString.Internal.PS dt dt1 dt5 dt4)
                        Data.getImagesFromFile15
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt dt5)
                             0#
                             GHC.Prim.realWorld# of ds7 { (#,#) ipv11 ipv12 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv11 of s'4 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt5 1#))
                             0#
                             GHC.Prim.realWorld# of ds8 { (#,#) ipv13 ipv14 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv13 of s'5 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt5 2#))
                             0#
                             GHC.Prim.realWorld# of ds9 { (#,#) ipv15 ipv16 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv15 of s'6 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt5 3#))
                             0#
                             GHC.Prim.realWorld# of ds10 { (#,#) ipv17 ipv18 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv17 of s'7 { DEFAULT ->
                      Data.$wlvl
                        dt
                        dt1
                        (GHC.Prim.+# dt5 4#)
                        (GHC.Prim.-# dt4 4#) } } } } } } } } } } } } } } } } } }) -}
984c61bb94e9449a23790fda7d593edc
  getImagesFromFile4 ::
    [Data.Binary.Get.Internal.Get [GHC.Word.Word8]]
  {- Strictness: m2 -}
abd9214e378ad9b6b95873ed53681a97
  getImagesFromFile5 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success [GHC.Word.Word8] r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2,
     Unfolding: (Data.getImagesFromFile7 Data.getImagesFromFile6) -}
ae7853d4379355311a8baaf1cfe7af83
  getImagesFromFile6 :: [Data.Binary.Get.Internal.Get GHC.Word.Word8]
  {- Strictness: m2 -}
6eefa53e2d47a56bcf1e0fdee94b524f
  getImagesFromFile7 ::
    [Data.Binary.Get.Internal.Get GHC.Word.Word8]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success [GHC.Word.Word8] r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,C(C1(U))> -}
9f80ef07c792bd0e0c3d375889795143
  getImagesFromFile8 ::
    [Data.Binary.Get.Internal.Get [GHC.Word.Word8]]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success [[GHC.Word.Word8]] r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,C(C1(U))> -}
74eda9b9582ec65151252753711cf5e9
  getImagesFromFile9 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder [[GHC.Word.Word8]]
  {- Arity: 2, Strictness: <L,A><S(SLSL),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                        0#
                        GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv4 of s'2 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                        0#
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv6 of s'3 { DEFAULT ->
                 Data.getImagesFromFile8
                   (GHC.Types.:
                      @ (Data.Binary.Get.Internal.Get [GHC.Word.Word8])
                      Data.getImagesFromFile5
                        `cast`
                      (Sym (Data.Binary.Get.Internal.N:Get[0] <[GHC.Word.Word8]>_R))
                      Data.getImagesFromFile4)
                   @ [[GHC.Word.Word8]]
                   (Data.ByteString.Internal.PS
                      dt
                      dt1
                      (GHC.Prim.+# dt2 4#)
                      (GHC.Prim.-# dt3 4#))
                   (Data.Binary.Get.Internal.$WDone
                      @ [[GHC.Word.Word8]]) } } } } } } } } }) -}
7279d2322611c65c8920a76db3bed6c5
  getImagesFromFile_enoughChunks ::
    GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.Either.Either
         GHC.Types.Int
         (Data.ByteString.Internal.ByteString,
          Data.ByteString.Internal.ByteString)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLLS),1*U(U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (n2 :: GHC.Types.Int)
                   (str2 :: Data.ByteString.Internal.ByteString) ->
                 case str2 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case n2 of wild1 { GHC.Types.I# y ->
                 case GHC.Prim.>=# dt3 y of lwild {
                   DEFAULT
                   -> Data.Either.Left
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (GHC.Types.I# (GHC.Prim.-# y dt3))
                   1#
                   -> Data.Either.Right
                        @ GHC.Types.Int
                        @ (Data.ByteString.Internal.ByteString,
                           Data.ByteString.Internal.ByteString)
                        (wild, Data.ByteString.empty) } } }) -}
f0ee9721a0fdc5f6e53d12c7ca5ec142
  getImagesFromFile_onFail ::
    [Data.ByteString.Internal.ByteString]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success a1 r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, Strictness: <L,U><L,A><L,A>m1, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: [Data.ByteString.Internal.ByteString])
                   @ r
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Data.Binary.Get.Internal.Success a1 r) ->
                 case Data.ByteString.concat
                        w of dt { Data.ByteString.Internal.PS ipv1 ipv2 ipv3 ipv4 ->
                 Data.Binary.Get.Internal.Fail
                   @ r
                   dt
                   (GHC.CString.unpackCString# "not enough bytes"#) }) -}
d9454273f08d56e1ce6b54249053d779
  getImagesFromFile_onSucc ::
    [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Data.ByteString.Internal.ByteString]) ->
                 Data.ByteString.concat
                   (GHC.List.dropWhile
                      @ Data.ByteString.Internal.ByteString
                      Data.ByteString.null
                      x)) -}
b34bab370a30154fd0b8fefeca9c7753
  getLabelsFromFile ::
    GHC.Base.String -> GHC.Types.IO [GHC.Word.Word8]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.getLabelsFromFile1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Word.Word8]>_R)) -}
f78d1dbc8edd4c4ef95b0f226e9f2905
  getLabelsFromFile1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Word.Word8] #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (file :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        file
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    Data.Binary.Get.runGet3
                      @ [GHC.Word.Word8]
                      Data.getLabelsFromFile2
                      ipv3 #) } }) -}
1725b7798244293d631bacbe2de8143e
  getLabelsFromFile2 :: Data.Binary.Get.Decoder [GHC.Word.Word8]
  {- Unfolding: (Data.Binary.Get.$wpoly_go
                   @ [GHC.Word.Word8]
                   (Data.Binary.Get.Internal.runGetIncremental1
                      @ [GHC.Word.Word8]
                      (Data.Binary.Get.Internal.readN1
                         @ GHC.Types.Int
                         @ Data.ByteString.Internal.ByteString
                         Data.getImagesFromFile13
                         Data.getImagesFromFile_enoughChunks
                         Data.getImagesFromFile_onSucc
                         (Data.getImagesFromFile_onFail
                            @ Data.ByteString.Internal.ByteString)
                           `cast`
                         (<[Data.ByteString.Internal.ByteString]>_R
                          ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                        <Data.ByteString.Internal.ByteString>_R))
                         @ [GHC.Word.Word8]
                         Data.ByteString.empty
                         Data.getLabelsFromFile3))
                   0#) -}
bf5858d9cb16f1467c4d0c2aea7c5375
  getLabelsFromFile3 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder [GHC.Word.Word8]
  {- Arity: 2, Strictness: <L,A><S(SLSS),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                        0#
                        GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv4 of s'2 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                        0#
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv6 of s'3 { DEFAULT ->
                 let {
                   dt4 :: GHC.Prim.Int# = GHC.Prim.-# dt3 4#
                 } in
                 let {
                   dt5 :: GHC.Prim.Int# = GHC.Prim.+# dt2 4#
                 } in
                 case GHC.Prim.>=# dt4 4# of lwild {
                   DEFAULT
                   -> Data.Binary.Get.Internal.readN1
                        @ GHC.Types.Int
                        @ Data.ByteString.Internal.ByteString
                        Data.getImagesFromFile13
                        Data.getImagesFromFile_enoughChunks
                        Data.getImagesFromFile_onSucc
                        Data.getImagesFromFile10
                          `cast`
                        (<[Data.ByteString.Internal.ByteString]>_R
                         ->_R Sym (Data.Binary.Get.Internal.N:Get[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        @ [GHC.Word.Word8]
                        (Data.ByteString.Internal.PS dt dt1 dt5 dt4)
                        Data.getLabelsFromFile8
                   1#
                   -> case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt dt5)
                             0#
                             GHC.Prim.realWorld# of ds7 { (#,#) ipv11 ipv12 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv11 of s'4 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt5 1#))
                             0#
                             GHC.Prim.realWorld# of ds8 { (#,#) ipv13 ipv14 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv13 of s'5 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt5 2#))
                             0#
                             GHC.Prim.realWorld# of ds9 { (#,#) ipv15 ipv16 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv15 of s'6 { DEFAULT ->
                      case GHC.Prim.readWord8OffAddr#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt5 3#))
                             0#
                             GHC.Prim.realWorld# of ds10 { (#,#) ipv17 ipv18 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.LiftedRep
                             @ GHC.ForeignPtr.ForeignPtrContents
                             dt1
                             ipv17 of s'7 { DEFAULT ->
                      Data.getLabelsFromFile7
                        (GHC.Types.:
                           @ (Data.Binary.Get.Internal.Get GHC.Word.Word8)
                           Data.getLabelsFromFile5
                             `cast`
                           (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Word.Word8>_R))
                           Data.getLabelsFromFile4)
                        @ [GHC.Word.Word8]
                        (Data.ByteString.Internal.PS
                           dt
                           dt1
                           (GHC.Prim.+# dt5 4#)
                           (GHC.Prim.-# dt4 4#))
                        (Data.Binary.Get.Internal.$WDone
                           @ [GHC.Word.Word8]) } } } } } } } } } } } } } } } } } }) -}
274fc364e7bb371e1b9ff5edb30c74a8
  getLabelsFromFile4 :: [Data.Binary.Get.Internal.Get GHC.Word.Word8]
  {- Strictness: m2 -}
f0a08c0b3ad4d1ea63c62233b36bf14c
  getLabelsFromFile5 ::
    Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Success GHC.Word.Word8 r
    -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 2, Strictness: <S(SLSS),1*U(U,U,U,U)><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: Data.ByteString.Internal.ByteString)
                   (w1 :: Data.Binary.Get.Internal.Success GHC.Word.Word8 r) ->
                 case w of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.$wlvl1 @ r ww1 ww2 ww3 ww4 w1 }) -}
50734103b51a760f3ac67f1159323772
  getLabelsFromFile6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
890f3ceea95874baafee704d73934b03
  getLabelsFromFile7 ::
    [Data.Binary.Get.Internal.Get GHC.Word.Word8]
    -> forall r.
       Data.ByteString.Internal.ByteString
       -> Data.Binary.Get.Internal.Success [GHC.Word.Word8] r
       -> Data.Binary.Get.Internal.Decoder r
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,C(C1(U))> -}
212c0324f706325990410928d99e20ff
  getLabelsFromFile8 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Data.Binary.Get.Internal.Decoder [GHC.Word.Word8]
  {- Arity: 2, Strictness: <L,A><S(SLSL),1*U(U,U,U,U)>,
     Unfolding: (\ (i' :: Data.ByteString.Internal.ByteString)
                   (a1 :: Data.ByteString.Internal.ByteString) ->
                 case a1 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt dt2)
                        0#
                        GHC.Prim.realWorld# of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 1#))
                        0#
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv2 of s'1 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 2#))
                        0#
                        GHC.Prim.realWorld# of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv4 of s'2 { DEFAULT ->
                 case GHC.Prim.readWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 3#))
                        0#
                        GHC.Prim.realWorld# of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        dt1
                        ipv6 of s'3 { DEFAULT ->
                 Data.getLabelsFromFile7
                   (GHC.Types.:
                      @ (Data.Binary.Get.Internal.Get GHC.Word.Word8)
                      Data.getLabelsFromFile5
                        `cast`
                      (Sym (Data.Binary.Get.Internal.N:Get[0] <GHC.Word.Word8>_R))
                      Data.getLabelsFromFile4)
                   @ [GHC.Word.Word8]
                   (Data.ByteString.Internal.PS
                      dt
                      dt1
                      (GHC.Prim.+# dt2 4#)
                      (GHC.Prim.-# dt3 4#))
                   (Data.Binary.Get.Internal.$WDone
                      @ [GHC.Word.Word8]) } } } } } } } } }) -}
e9df43b69dd742e8967a7066203e8c04
  getTrainingData ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO [([GHC.Types.Double], GHC.Types.Int)]
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.getTrainingData1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <[([GHC.Types.Double], GHC.Types.Int)]>_R)) -}
a8b4d005c07b55dec03f4b34facdbc86
  getTrainingData1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [([GHC.Types.Double], GHC.Types.Int)] #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (imagef :: GHC.Base.String)
                   (labelf :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        imagef
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        labelf
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    Data.getTrainingData_go
                      (Data.Binary.Get.runGet3
                         @ [[GHC.Word.Word8]]
                         Data.getImagesFromFile2
                         ipv3)
                      (GHC.Base.map
                         @ GHC.Word.Word8
                         @ GHC.Types.Int
                         Data.getTrainingData2
                         (Data.Binary.Get.runGet3
                            @ [GHC.Word.Word8]
                            Data.getLabelsFromFile2
                            ipv7)) #) } } } }) -}
800b1fa660f60eda61b6d13545a0c3e3
  getTrainingData2 :: GHC.Word.Word8 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Word.Word8) ->
                 case ds of wild { GHC.Word.W8# x# ->
                 GHC.Types.I# (GHC.Prim.word2Int# x#) }) -}
828d738862097f4d84b315efc2eeea97
  getTrainingData_go ::
    [[GHC.Word.Word8]]
    -> [GHC.Types.Int] -> [([GHC.Types.Double], GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

