
==================== FINAL INTERFACE ====================
2018-10-26 18:34:38.319047232 UTC

interface main:Network 8043
  interface hash: c3d141a69d23f60fb7a44cdde5287788
  ABI hash: 30f3270d107f20d163fa03ee018dac38
  export-list hash: 81f25519ff984ac8c65da28b582c82dc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8146d206ee62deaf75677622cb46f5a2
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Network.emptyNetwork
  Network.predict
  Network.sgd
  Network.Network{Network.Network}
module dependencies:
package dependencies: MonadRandom-0.5.1.1 array-0.5.2.0
                      base-4.11.1.0* deepseq-1.4.3.0 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      mtl-2.2.2 primitive-0.6.3.0 random-1.1* random-shuffle-0.0.4
                      split-0.2.3.3 time-1.8.0.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         primitive-0.6.3.0:Control.Monad.Primitive
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
import  -/  random-shuffle-0.0.4:System.Random.Shuffle a4b56771a445ab7053c97b089530ce69
import  -/  split-0.2.3.3:Data.List.Split 5324097c17aea95e263e86195d8f4cf4
import  -/  split-0.2.3.3:Data.List.Split.Internals 5b68cd2231dc71aa99e1db1b43dd9a13
f1ce555ec78b70c50410a2fc6200990b
  $tc'Network :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16283596183277969600##
                   7956190042959117863##
                   Network.$trModule
                   Network.$tc'Network2
                   0#
                   Network.$tc'Network1) -}
ae80524f946d2b0dc942c92d0fcd3a1f
  $tc'Network1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e9853321f4d7453b055ec72686f00944
  $tc'Network2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Network.$tc'Network3) -}
8ccc162dc7b956724ddc48d219cce9c7
  $tc'Network3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Network"#) -}
9a65251dc4f392bbe7d62c71e024fec4
  $tcNetwork :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   377334789631239892##
                   18355174488711872346##
                   Network.$trModule
                   Network.$trModule1
                   0#
                   GHC.Types.krep$*) -}
99da97f081eab2ad8b65d6d2dc619801
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Network.$trModule3
                   Network.$trModule1) -}
93d0ebaa2cfc8b0f733d3e3b16c92074
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Network.$trModule2) -}
cc38dc5213172e77963cdc31c4e080c3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Network"#) -}
77fac7a432e547096b18d07f8e21fd31
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Network.$trModule4) -}
50d88f032a8317f8ab6ab57776842c23
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
393698fad9cf3513982b325f71857338
  $wgo ::
    System.Random.StdGen
    -> GHC.Prim.Int#
    -> [GHC.Types.Double]
    -> [(GHC.Types.Double, GHC.Types.Double)]
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
246220bb6cb037e9b5786a681f9cb8f6
  $wsgd ::
    [([GHC.Types.Double], GHC.Types.Int)]
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Double
    -> Network.Network
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Network.Network #)
  {- Arity: 6,
     Strictness: <L,U><S,1*U><L,U(U)><L,U(U)><L,U(U,U)><S,U>,
     Inline: [0] -}
cf0e96f3157910213f7ff68b4bbf033e
  $wxs :: GHC.Prim.Int# -> [GHC.Types.Double]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0] -}
2500e9ba9c7f38fb92a7a8ac3a211c2f
  data Network
    = Network [(GHC.Types.Double, GHC.Types.Double)] [GHC.Types.Int]
2124e5a5f9ac2f0ff8d7cb9f55a895d4
  emptyNetwork :: [GHC.Types.Int] -> GHC.Types.IO Network.Network
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.emptyNetwork1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Network>_R)) -}
0ef8a7be2baaf1f3227ed781b217651c
  emptyNetwork1 ::
    [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Network.Network #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (sizes :: [GHC.Types.Int])
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Network.Network
                      (let {
                         exit :: GHC.Prim.Int# -> [(GHC.Types.Double, GHC.Types.Double)]
                           <join 1> {- Arity: 1, Strictness: <S,U> -}
                         = \ (ww :: GHC.Prim.Int#)[OneShot] ->
                           case GHC.Prim.<# 0# ww of lwild {
                             DEFAULT -> GHC.Types.[] @ (GHC.Types.Double, GHC.Types.Double)
                             1# -> Network.$wgo ipv1 ww (Network.$wxs ww) }
                       } in
                       letrec {
                         $wgo2 :: [GHC.Types.Int]
                                  -> GHC.Prim.Int# -> [(GHC.Types.Double, GHC.Types.Double)]
                           <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                         = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                           case w of wild1 {
                             [] -> exit ww
                             : y ys
                             -> case y of wild2 { GHC.Types.I# y1 ->
                                $wgo2 ys (GHC.Prim.+# ww y1) } }
                       } in
                       $wgo2 sizes 0#)
                      sizes #) } }) -}
cb8685c975c77d61ca98f5812e236be5
  predict ::
    Network.Network -> [GHC.Types.Double] -> [GHC.Types.Double]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Network) (w1 :: [GHC.Types.Double]) ->
                 case w of ww { Network.Network ww1 ww2 ->
                 Network.predict_go ww1 w1 }) -}
7037e502b0cca8d8f257ccefa470d29f
  predict_go ::
    [(GHC.Types.Double, GHC.Types.Double)]
    -> [GHC.Types.Double] -> [GHC.Types.Double]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
afa0a4ff68a232a613620c56493c9f96
  sgd ::
    [([GHC.Types.Double], GHC.Types.Int)]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Double
    -> Network.Network
    -> GHC.Types.IO Network.Network
  {- Arity: 6,
     Strictness: <L,U><S(S),1*U(1*U)><L,U(U)><L,U(U)><L,U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.sgd1
                  `cast`
                (<[([GHC.Types.Double], GHC.Types.Int)]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Double>_R
                 ->_R <Network.Network>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Network>_R)) -}
da166f47fe8c608b03898a1ed055f0c0
  sgd1 ::
    [([GHC.Types.Double], GHC.Types.Int)]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Double
    -> Network.Network
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Network.Network #)
  {- Arity: 6,
     Strictness: <L,U><S(S),1*U(1*U)><L,U(U)><L,U(U)><L,U(U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: [([GHC.Types.Double], GHC.Types.Int)])
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Double)
                   (w4 :: Network.Network)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Network.$wsgd w ww1 w2 w3 w4 w5 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

