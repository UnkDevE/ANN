
==================== FINAL INTERFACE ====================
2018-10-26 18:42:29.228619407 UTC

interface main:Main 8043
  interface hash: 3d978f75348f07156a4a00eca01bba95
  ABI hash: 12c6b94f426a6509c28da5847c4ce39c
  export-list hash: fc9970ac23574c3272b7fdc5c6e27cd4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7f9551d7d57ad6494bbe228b7d01768d
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Data Network
package dependencies: MonadRandom-0.5.1.1 array-0.5.2.0
                      base-4.11.1.0* binary-0.8.5.1 bytestring-0.10.8.2 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2 primitive-0.6.3.0
                      random-1.1 random-shuffle-0.0.4 split-0.2.3.3 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         primitive-0.6.3.0:Control.Monad.Primitive
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Data dad82d6e24dc3f4a5a52667185117ee6
  exports: a357e79a37cfd214c811cbeb490e42cc
  getTrainingData e9df43b69dd742e8967a7066203e8c04
import  -/  Network 30f3270d107f20d163fa03ee018dac38
  exports: 81f25519ff984ac8c65da28b582c82dc
  emptyNetwork 2124e5a5f9ac2f0ff8d7cb9f55a895d4
  predict cb8685c975c77d61ca98f5812e236be5
  sgd afa0a4ff68a232a613620c56493c9f96
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
8af25718f744c55ef1ca5bdcaed1d3ec
  $wshowl ::
    [GHC.Types.Double] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
99ad22d93b072d5111dcda125cfda831
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
cd7617a00e16e6382512fda15e11ad83
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Data.getTrainingData1
                        Main.main12
                        Main.main10
                        s of ds1 { (#,#) ipv ipv1 ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Network.$wsgd
                        (GHC.List.tail @ ([GHC.Types.Double], GHC.Types.Int) ipv1)
                        30#
                        Main.main6
                        Main.main9
                        (Network.Network
                           (let {
                              exit :: GHC.Prim.Int# -> [(GHC.Types.Double, GHC.Types.Double)]
                                <join 1> {- Arity: 1, Strictness: <S,U> -}
                              = \ (ww :: GHC.Prim.Int#)[OneShot] ->
                                case GHC.Prim.<# 0# ww of lwild {
                                  DEFAULT -> GHC.Types.[] @ (GHC.Types.Double, GHC.Types.Double)
                                  1# -> Network.$wgo ipv3 ww (Network.$wxs ww) }
                            } in
                            letrec {
                              $wgo2 :: [GHC.Types.Int]
                                       -> GHC.Prim.Int# -> [(GHC.Types.Double, GHC.Types.Double)]
                                <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                              = \ (w :: [GHC.Types.Int]) (ww :: GHC.Prim.Int#) ->
                                case w of wild1 {
                                  [] -> exit ww
                                  : y ys
                                  -> case y of wild2 { GHC.Types.I# y1 ->
                                     $wgo2 ys (GHC.Prim.+# ww y1) } }
                            } in
                            $wgo2 Main.main_sizes 0#)
                           Main.main_sizes)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      Main.main3
                      (case ipv1 of wild1 {
                         [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                         : x ds4
                         -> case x of wild2 { (,) ds5 y ->
                            case y of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww3
                                   (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Base.++_$s++
                              @ GHC.Types.Char
                              (GHC.CString.unpackAppendCString#
                                 Main.main2
                                 (case ipv5 of ww { Network.Network ww1 ww7 ->
                                  case Network.predict_go ww1 ds5 of wild3 {
                                    []
                                    -> GHC.CString.unpackAppendCString#
                                         GHC.Show.showList__4
                                         (GHC.Types.[] @ GHC.Types.Char)
                                    : x1 xs
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showList__3
                                         (case x1 of ww8 { GHC.Types.D# ww9 ->
                                          GHC.Float.$w$sshowSignedFloat
                                            GHC.Float.$fShowDouble2
                                            GHC.Float.minExpt
                                            ww9
                                            (Main.main_showl xs) }) } }))
                              ww5
                              ww6 } } } }))
                   GHC.Types.True
                   ipv4 } } } }) -}
b970a18dcee7ab85fa6580af61ebc72d
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main11) -}
ce9932b52ae59b4f936ec6c4bbc905ec
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("trainingdata/train-labels-idx3-ubyte"#) -}
4fe9e2c1815a1217093ce5ed4ae6c549
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main13) -}
857ff3655476afd39fa3a87f6d0cb5cb
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("trainingdata/train-images-idx3-ubyte"#) -}
cb16c9a1f8699a2b7c4134cf19c7b0d2
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
9e43640f906c97e742096814d02a68e3
  main2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("predicted: "#) -}
a6b647c69b147a247d9df6c2ff75ae32
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("actual: "#) -}
0df5bd9c2f90d9875f0aa4d4a2b4f5b5
  main4 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ GHC.Types.Int Main.main7 Main.main5) -}
cd8119da5b6ec1e9d612346999b586a7
  main5 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.main6
                   (GHC.Types.[] @ GHC.Types.Int)) -}
4f63480061791140633cef41c3e7f427
  main6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
379f005711eb8174305a86e4d384c496
  main7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
301d746996cf4648cd05f2ab92e5853c
  main8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 712#) -}
77dd719c99a3d7fcaa9ce1d8c969487d
  main9 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 3.0##) -}
13957737d89704f31dffafd731c4e700
  main_showl :: [GHC.Types.Double] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Double]) ->
                 case Main.$wshowl w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
4c40658382e2792b35b7eecc065c14a0
  main_sizes :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.: @ GHC.Types.Int Main.main8 Main.main4) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

